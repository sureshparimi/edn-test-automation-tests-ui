[{"keyword": "Feature", "uri": "dashboard/dashboard_homepage.feature", "name": "Go to websites page from dashboard homepage", "id": "dashboard/dashboard_homepage.feature", "line": 2, "description": "", "tags": [{"name": "EDN002", "line": 1}, {"name": "automated", "line": 1}, {"name": "nondestructive", gi"line": 1}, {"name": "regression", "line": 1}, {"name": "smoke", "line": 1}], "elements": [{"keyword": "Scenario", "id": "test_go_to_websites_page_from_dashboard_homepage[Edison Custom]", "name": "Go to websites page from dashboard homepage", "line": 6, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "the dashboard homepage is displayed", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 39222032785}}, {"keyword": "When", "name": "the user clicks on websites menu", "line": 7, "match": {"location": ""}, "result": {"status": "passed", "duration": 5066435098}}, {"keyword": "When", "name": "the user clicks on Edison Custom", "line": 8, "match": {"location": ""}, "result": {"status": "passed", "duration": 3501638889}}, {"keyword": "Then", "name": "the user should see websites header on the websites page", "line": 9, "match": {"location": ""}, "result": {"status": "passed", "duration": 29422760}}, {"keyword": "Then", "name": "the user should see Edison Custom as selected offering type in filters", "line": 10, "match": {"location": ""}, "result": {"status": "passed", "duration": 24620056}}]}, {"keyword": "Scenario", "id": "test_go_to_websites_page_from_dashboard_homepage[Edison Lite]", "name": "Go to websites page from dashboard homepage", "line": 6, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "the dashboard homepage is displayed", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 32732136011}}, {"keyword": "When", "name": "the user clicks on websites menu", "line": 7, "match": {"location": ""}, "result": {"status": "passed", "duration": 5065657138}}, {"keyword": "When", "name": "the user clicks on Edison Lite", "line": 8, "match": {"location": ""}, "result": {"status": "passed", "duration": 2510951995}}, {"keyword": "Then", "name": "the user should see websites header on the websites page", "line": 9, "match": {"location": ""}, "result": {"status": "passed", "duration": 25568008}}, {"keyword": "Then", "name": "the user should see Edison Lite as selected offering type in filters", "line": 10, "match": {"location": ""}, "result": {"status": "passed", "duration": 23823976}}]}, {"keyword": "Scenario", "id": "test_go_to_websites_page_from_dashboard_homepage[Edison Legacy]", "name": "Go to websites page from dashboard homepage", "line": 6, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "the dashboard homepage is displayed", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 31016659975}}, {"keyword": "When", "name": "the user clicks on websites menu", "line": 7, "match": {"location": ""}, "result": {"status": "passed", "duration": 5063668966}}, {"keyword": "When", "name": "the user clicks on Edison Legacy", "line": 8, "match": {"location": ""}, "result": {"status": "passed", "duration": 2817210197}}, {"keyword": "Then", "name": "the user should see websites header on the websites page", "line": 9, "match": {"location": ""}, "result": {"status": "passed", "duration": 27128934}}, {"keyword": "Then", "name": "the user should see Edison Legacy as selected offering type in filters", "line": 10, "match": {"location": ""}, "result": {"status": "passed", "duration": 26489019}}]}]}, {"keyword": "Feature", "uri": "dashboard/dashboard_prepareMTP.feature", "name": "Prepare an MTP from the dashboard", "id": "dashboard/dashboard_preparemtp.feature", "line": 2, "description": "", "tags": [{"name": "EDN004", "line": 1}, {"name": "automated", "line": 1}, {"name": "critical", "line": 1}, {"name": "nondestructive", "line": 1}, {"name": "regression", "line": 1}, {"name": "smoke", "line": 1}], "elements": [{"keyword": "Scenario", "id": "test_prepare_an_mtp_from_the_dashboard[sandbox02-Break-Fix-07/01/2021-Kolkata-987456-parims03-parims03-This MTP is created by pytest automation script.No action is necessary,please ignore it.]", "name": "Prepare an MTP from the dashboard", "line": 7, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "existing MTPs available for the sandbox02", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 42865242004}}, {"keyword": "Given", "name": "the user cancells the existing MTPs", "line": 5, "match": {"location": ""}, "result": {"status": "failed", "error_message": "request = <FixtureRequest for <Function test_prepare_an_mtp_from_the_dashboard[sandbox02-Break-Fix-07/01/2021-Kolkata-987456-parims03-parims03-This MTP is created by pytest automation script.No action is necessary,please ignore it.]>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pytest_bdd/scenario.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pytest_bdd/scenario.py:166: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pytest_bdd/scenario.py:115: in _execute_step_function\n    step_func(**kwargs)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pytest_bdd/steps.py:163: in step_func\n    result = request.getfixturevalue(func.__name__)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:487: in getfixturevalue\n    return self._get_active_fixturedef(argname).cached_result[0]\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:503: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:584: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:914: in execute\n    return hook.pytest_fixture_setup(fixturedef=self, request=request)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pluggy/hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pluggy/manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pluggy/manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:964: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:792: in call_fixture_func\n    res = fixturefunc(**kwargs)\nstep_definitions/steps_given.py:260: in cancel_existing_mtps_available_for_sitename\n    mtpsPage.cancel_all_mtps(all_mtps)\npage_objects/dashboard_mtps_pageObject.py:84: in cancel_all_mtps\n    cancel_mtp_link = self.__cancel_mtp_link_in_hamburger_menu()\npage_objects/dashboard_mtps_pageObject.py:40: in __cancel_mtp_link_in_hamburger_menu\n    cancel_mtp_link = self._selenium.find_element(by=By.XPATH, value=MTPPageLocators.cancel_mtp_link_hamburger_menu)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1202c39d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...7fff59257249 _pthread_start + 66\\\\n20  libsystem_pthread.dylib             0x00007fff5925340d thread_start + 13\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[contains(text(),'Cancel MTP')]\"}\nE         (Session info: headless chrome=87.0.4280.141)\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: NoSuchElementException", "duration": 11717714071}}, {"keyword": "Given", "name": "the user is on the sandbox02 page", "line": 8, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 715}}, {"keyword": "Given", "name": "the user on the Prepare MTP form", "line": 9, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 953}}, {"keyword": "When", "name": "the user fills the MTP form with Break-Fix,07/01/2021,Kolkata,987456,parims03,parims03,This MTP is created by pytest automation script.No action is necessary,please ignore it.", "line": 10, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 0}}, {"keyword": "When", "name": "the user submits the MTP form", "line": 11, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 1192}}, {"keyword": "Then", "name": "an MTP should be created successfully", "line": 12, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 0}}]}, {"keyword": "Scenario", "id": "test_prepare_an_mtp_from_the_dashboard[sandbox01-Site launch-07/01/2021-Kolkata-987456-parims03-parims03-This MTP is created by pytest automation script.No action is necessary,please ignore it.]", "name": "Prepare an MTP from the dashboard", "line": 7, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "existing MTPs available for the sandbox01", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 47729034900}}, {"keyword": "Given", "name": "the user cancells the existing MTPs", "line": 5, "match": {"location": ""}, "result": {"status": "failed", "error_message": "request = <FixtureRequest for <Function test_prepare_an_mtp_from_the_dashboard[sandbox01-Site launch-07/01/2021-Kolkata-987456-parims03-parims03-This MTP is created by pytest automation script.No action is necessary,please ignore it.]>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pytest_bdd/scenario.py:200: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pytest_bdd/scenario.py:166: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pytest_bdd/scenario.py:115: in _execute_step_function\n    step_func(**kwargs)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pytest_bdd/steps.py:163: in step_func\n    result = request.getfixturevalue(func.__name__)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:487: in getfixturevalue\n    return self._get_active_fixturedef(argname).cached_result[0]\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:503: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:584: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:914: in execute\n    return hook.pytest_fixture_setup(fixturedef=self, request=request)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pluggy/hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pluggy/manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pluggy/manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:964: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/_pytest/fixtures.py:792: in call_fixture_func\n    res = fixturefunc(**kwargs)\nstep_definitions/steps_given.py:260: in cancel_existing_mtps_available_for_sitename\n    mtpsPage.cancel_all_mtps(all_mtps)\npage_objects/dashboard_mtps_pageObject.py:84: in cancel_all_mtps\n    cancel_mtp_link = self.__cancel_mtp_link_in_hamburger_menu()\npage_objects/dashboard_mtps_pageObject.py:40: in __cancel_mtp_link_in_hamburger_menu\n    cancel_mtp_link = self._selenium.find_element(by=By.XPATH, value=MTPPageLocators.cancel_mtp_link_hamburger_menu)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x120dadc40>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...7fff59257249 _pthread_start + 66\\\\n20  libsystem_pthread.dylib             0x00007fff5925340d thread_start + 13\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[contains(text(),'Cancel MTP')]\"}\nE         (Session info: headless chrome=87.0.4280.141)\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: NoSuchElementException", "duration": 9948508262}}, {"keyword": "Given", "name": "the user is on the sandbox01 page", "line": 8, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 1907}}, {"keyword": "Given", "name": "the user on the Prepare MTP form", "line": 9, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 953}}, {"keyword": "When", "name": "the user fills the MTP form with Site launch,07/01/2021,Kolkata,987456,parims03,parims03,This MTP is created by pytest automation script.No action is necessary,please ignore it.", "line": 10, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 953}}, {"keyword": "When", "name": "the user submits the MTP form", "line": 11, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 0}}, {"keyword": "Then", "name": "an MTP should be created successfully", "line": 12, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 953}}]}]}, {"keyword": "Feature", "uri": "dashboard/dashboard_search_for_a_site.feature", "name": "Search for a website in the dashboard", "id": "dashboard/dashboard_search_for_a_site.feature", "line": 2, "description": "", "tags": [{"name": "EDN003", "line": 1}, {"name": "automated", "line": 1}, {"name": "critical", "line": 1}, {"name": "nondestructive", "line": 1}, {"name": "regression", "line": 1}, {"name": "smoke", "line": 1}], "elements": [{"keyword": "Scenario", "id": "test_search_for_a_website_in_the_dashboard[sandbox01]", "name": "Search for a website in the dashboard", "line": 6, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "the user is on the websites page", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 49129830121}}, {"keyword": "When", "name": "the user enters sandbox01 into sitename field", "line": 7, "match": {"location": ""}, "result": {"status": "passed", "duration": 82825899}}, {"keyword": "When", "name": "the user clicks the Filter button", "line": 8, "match": {"location": ""}, "result": {"status": "passed", "duration": 12153695106}}, {"keyword": "Then", "name": "the search results contain sandbox01", "line": 9, "match": {"location": ""}, "result": {"status": "passed", "duration": 29264926}}, {"keyword": "Then", "name": "the user clicks on sandbox01 from the search results", "line": 10, "match": {"location": ""}, "result": {"status": "passed", "duration": 6737460136}}]}, {"keyword": "Scenario", "id": "test_search_for_a_website_in_the_dashboard[sandbox03]", "name": "Search for a website in the dashboard", "line": 6, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "the user is on the websites page", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 49613089084}}, {"keyword": "When", "name": "the user enters sandbox03 into sitename field", "line": 7, "match": {"location": ""}, "result": {"status": "passed", "duration": 79121828}}, {"keyword": "When", "name": "the user clicks the Filter button", "line": 8, "match": {"location": ""}, "result": {"status": "passed", "duration": 11968379974}}, {"keyword": "Then", "name": "the search results contain sandbox03", "line": 9, "match": {"location": ""}, "result": {"status": "passed", "duration": 25811910}}, {"keyword": "Then", "name": "the user clicks on sandbox03 from the search results", "line": 10, "match": {"location": ""}, "result": {"status": "passed", "duration": 7862675189}}]}, {"keyword": "Scenario", "id": "test_search_for_a_website_in_the_dashboard[sandbox02]", "name": "Search for a website in the dashboard", "line": 6, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "the user is on the websites page", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 49462222814}}, {"keyword": "When", "name": "the user enters sandbox02 into sitename field", "line": 7, "match": {"location": ""}, "result": {"status": "passed", "duration": 76963901}}, {"keyword": "When", "name": "the user clicks the Filter button", "line": 8, "match": {"location": ""}, "result": {"status": "passed", "duration": 12202757835}}, {"keyword": "Then", "name": "the search results contain sandbox02", "line": 9, "match": {"location": ""}, "result": {"status": "passed", "duration": 26781082}}, {"keyword": "Then", "name": "the user clicks on sandbox02 from the search results", "line": 10, "match": {"location": ""}, "result": {"status": "passed", "duration": 7848857879}}]}, {"keyword": "Scenario", "id": "test_search_for_a_website_in_the_dashboard[sandbox]", "name": "Search for a website in the dashboard", "line": 6, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "the user is on the websites page", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 49353083133}}, {"keyword": "When", "name": "the user enters sandbox into sitename field", "line": 7, "match": {"location": ""}, "result": {"status": "passed", "duration": 76937913}}, {"keyword": "When", "name": "the user clicks the Filter button", "line": 8, "match": {"location": ""}, "result": {"status": "passed", "duration": 12062053918}}, {"keyword": "Then", "name": "the search results contain sandbox", "line": 9, "match": {"location": ""}, "result": {"status": "passed", "duration": 52120923}}, {"keyword": "Then", "name": "the user clicks on sandbox from the search results", "line": 10, "match": {"location": ""}, "result": {"status": "passed", "duration": 18159497976}}]}]}]